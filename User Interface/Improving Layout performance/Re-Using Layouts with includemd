# Re-using layouts with <include/>

Alothg android offers a variety of widgets to provide small and re-usable interactive elements, you might also need to re-use larger components that require a special layout. To efficiently re-use layouts, you can use the <include/> and <merge/> tags to embed another layout inside the current layout. 

Reusing layouts is particularly powerful as it allow syou cto create reusable complex layouts. For example, a yes/no button panel , or custom progress bar with description text. It also means that any elements of  your application that are common across multiple layouts can be extracted, maanged sepearately, then included in each layout. So hwhile you7 can create individual UI components by writing a custom View, you can do it even more easily by re-using a layout file.

## Create a reusable layout
Ifv you already know the layout that you want to re-use, create a new XML file and define the layout. 

```
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@color/titlebar_bg"
    tools:showIn="@layout/activity_main" >

    <ImageView android:layout_width="wrap_content"
               android:layout_height="wrap_content"
               android:src="@drawable/gafricalogo" />
</FrameLayout>
```

## Use the <include> tag
Inside the layout to which you want to add the re-usable componet, add the <include/> tag. For examplle, here's a layout that includes the title bar from above.

```
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/app_bg"
    android:gravity="center_horizontal">

    <include layout="@layout/titlebar"/>

    <TextView android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:text="@string/hello"
              android:padding="10dp" />

    ...

</LinearLayout>
```

You can also override all the layout paramaeters (any `android:layout_*` attributes) of the included layout's root view by specifyigng them in the `<include/>` tag

```
<include android:id="@+id/news_title"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
         layout="@layout/title"/>
```


## User the <merge> tag
The `<merge /> ` tag helps eliminate redundant view groups in your view hierarchy when including one layout within another. For example, if your main layout is a vertical `LinearLayout` in which two consective views can be re-used in multiple layouts, then the re-usable layout in which you place the twoviews requires its own root view. However, using another `LinearLayout` as the root for the re-usable layot would result in a vertical `LinearLayout` insid avertical `LinearLayout`. The nested `LinearLayout` serves no real purpose other than to slow down your UI performance. 

TO avoid includin such a redundant view group, you can instead use the `<merge> element as the root veiw fothe re-usable alyout

```
<merge xmlns:android="http://schemas.android.com/apk/res/android">

    <Button
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="@string/add"/>

    <Button
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="@string/delete"/>

</merge>
```

Now When you include this layout in another layout the systme igrnoores the `<merge> element and places the two buttons directly in the layout in place of the <include/> tag
