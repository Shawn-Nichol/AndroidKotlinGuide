The paging library helps you load and display pages of data from a larger dataset from local storage or over network. This approach allow syou r app to use both network bandwidth and system resrouces more efficiently. The componenet so of pagingin library are designed to fit into the recommended Android app architecture integrate cleanlly iwth other Jetpack components and provided first class kottlin support. 

The pagining library includes the following features. 
- In-memory caching ffor your paged data. This ensures that your app uuses system resources efficiently while working with paged data. 
- Built in request deduplication, ensuring that your app uses network bandwidth and system resources efficiently. 
-Configurable RecyclerView adapters that automatically request data as the user scrolls twoard the end of the loaded data. 
- First-class cupport for koltin coroutines and flow as well as liveData and RxJava
- Built in suppport for error handling, including referesh and retry capabilities. 

## Setup
Import dependencies
```
dependencies {
  def paging_version = "3.0.0-alpha06"

  implementation "androidx.paging:paging-runtime:$paging_version"

  // alternatively - without Android dependencies for tests
  testImplementation "androidx.paging:paging-common:$paging_version"
}
```

## Library archtecture

The paging library integrates directly into the recommended Android app architecture. THe library's componetns operate in three layers of your app

### The repository layer
The primary pagingin library component in the repository layer is PagingSource. Each PagingSource object defines a source of data and how to retrieve data from that source. A PagingingSource object can load data from any singel source, including network sources and local databases. 

Another Paging library component that you might use in RemoteMediator. A RemoteMediator object handles paging from a layered data source, such as a network data source with a local database cache. 

## ViewModel Layer
The Pager component provides a public API for constructing instances o f PaginingData that are exposed in reactive streams, based on a PagingSource object and a PaginingConfig configuration object. 

The component that connects the ViewModel layer to the UI is PagingData. A PagingData object is a container for a snapshot of paginated data. It queries a PaginingSource object and store the result. 

## UI Layer
The primary paging library component in the UI layer is PaginingDataAdapter, a RecyclerView adapter that handles paginated data. 
Alternatively, you can use the included AsynPagiingDataDiffer compoonent to build your own custom adapter. 




- The ViewModel Layer
- The UI layer

