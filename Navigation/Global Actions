## Connect destinations
An action is a logical connection between destinations. Actions are represented in the navigation graph as arrows. Actions usually connect on e destination to another, though you can also create global actions that take you to a specific destination from aywhere in your app. 

With actions, you're representing the different paths that users can take through you can also create global actions that take you to a specific destination from anywehre in your app. 

With actions, you're representing the different paths that users can take through your app. Note that to actually  connect one destination to another,though you can also create global actions that take you to a specific destination from anywhere in your app. 

With actions, you're representing the differen tpaths that users can take through your app. Note that to acutally navigate to destinations, you still need to wwrite the code to perform the navigation. This is covered in the Navigate to a destination section. 

You can use the Navigation editor to connect two destinatioons by doing the following. 

1. in the desgine tab, hover over the right side of the destination that you want users to navigate from. A circle appears over the right side of the destination, 

2. Click and drag your cursor over the destination you want users to navigate to, and release. The resulting line between the two destinations represents an action. 

3. Click on the arrow to highlight the action. The following attributes appear in the Attributes panel
- the type filed contains "Action"
- The ID field contains the ID for the action.
- Th edestination field contains the ID for the destination fragment or activity. 

4. Click the Text tab to toggle to the XML view. An action element is now added to the source destination. The action has an ID and a destination attrbitue that contains the ID of the next destination, as shown in the example below. 

```
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:android="http://schemas.android.com/apk/res/android"
    app:startDestination="@id/blankFragment">
    <fragment
        android:id="@+id/blankFragment"
        android:name="com.example.cashdog.cashdog.BlankFragment"
        android:label="fragment_blank"
        tools:layout="@layout/fragment_blank" >
        <action
            android:id="@+id/action_blankFragment_to_blankFragment2"
            app:destination="@id/blankFragment2" />
    </fragment>
    <fragment
        android:id="@+id/blankFragment2"
        android:name="com.example.cashdog.cashdog.BlankFragment2"
        android:label="fragment_blank_fragment2"
        tools:layout="@layout/fragment_blank_fragment2" />
</navigation>
```
In your navigation graph, actions are represented by <action> elements. At a minium, an action contains its own ID and the ID of the destination to which a user should be taken. 
  
## Navigation to a destination
Navigation to a destination is done using a NavController, an object hat manages app navigation within a NavHost. Each NavHost has its own correspondingn Navcontroller. you can retireve a NavController by uing one of the following methos

Kotlin
- Fragment.findNavController()
- View.findNavController()
- activity.findNavController()

When createing the NavHostFragment using FragmentContainerView or if manually adding the NavHostFramgent to your activity via a FragmentTransaction, attempting to retrieve the NavController in onCreate(0 of an activity via navigation.findNavController(Activity, #EdRes int) will fail. You should retrieve the NavController directly from the NavHostFragment instead. 

```
val navHostFragment = suppoortFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
val navController = navHostFragmennt.navController. 
```



## GLobal actions
Any destination in your app that cna be reached through more than one path should have a corresponding global action defined to navigate to that destination. Global actions can be used to navigate to a destination from anywhere. 

Let's apply this to our library module sample, which has the same actions defined in both ethe win and game over destinatinos. you should extract these common actions to a single global action and reference them from both destiations.

```
<?xml version="1.0" encoding="utf-8"?>
<navigation xmlns:android="http://schemas.android.com/apk/res/android"
   xmlns:app="http://schemas.android.com/apk/res-auto"
   android:id="@+id/in_game_nav_graph"
   app:startDestination="@id/in_game">

   <!-- Action back to destination which launched into this in_game_nav_graph-->
   <action android:id="@+id/action_pop_out_of_game"
                       app:popUpTo="@id/in_game_nav_graph"
                       app:popUpToInclusive="true" />

   <fragment
       android:id="@+id/in_game"
       android:name="com.example.android.gamemodule.InGame"
       android:label="Game">
       <action
           android:id="@+id/action_in_game_to_resultsWinner"
           app:destination="@id/results_winner" />
       <action
           android:id="@+id/action_in_game_to_gameOver"
           app:destination="@id/game_over" />
   </fragment>

   <fragment
       android:id="@+id/results_winner"
       android:name="com.example.android.gamemodule.ResultsWinner" />

   <fragment
       android:id="@+id/game_over"
       android:name="com.example.android.gamemodule.GameOver"
       android:label="fragment_game_over"
       tools:layout="@layout/fragment_game_over" />

</navigation>
```
